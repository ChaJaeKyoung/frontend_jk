1. 타입스크립트란?
MicroSoft 마소에서 만듦
JavaScript는 문법이 매우 유연한 동적 타입 언어(=변수 선언 시 자료형을 정의할 필요가 없음)
TypeScript는 문법이 매우 엄격한 정적 타입 언어(=변수 선언 시 자료형을 미리 지정)
TypeScript = JavaScript + Type문법이 추가된 JavaScript Superset(상위집합 : TS > JS)
타입스크립트는 새로운 언어가 아님, 
자바스크립트의 타입 부분을 업그레이드해서 사용하고 싶을 때 설치해서 쓰는 것(기존 자바스크립트의 일부에 부분 적용 가능)

2. 타입스크립트 쓰는 이유?
1) JS는 매우 유연하고 다른 자료형의 값도 수용할 수 있기 때문에, 코드가 혼란스러워지고 버그가 발생하기 쉬움
언뜻 편해보이지만 프로젝트의 규모가 복잡하고 커질수록 언어의 유연성은 점점 단점으로 작용(안돼야 하는데, 되어버려서 잠재적 오류 발생 가능성이 높아짐)

예1)
JS는 매우 유연한 동적 타입 언어이기에 아래 연산이 가능성이 가능
10 - '5' // JS가 알아서 숫자로 바꾸고 연산

TS는 타입을 엄격하게 검사함
(정접 타입 언어는 숫자 - 숫자만 가능)
10 - '5' // TS 에러 발생

예2)
function getUserById(userId) {
  // 사용자 id를 이용하여 사용자 정보 조회 api 호출
}

Quiz. 여기서 userId는 숫자로 넘겨줘야 할까요? 문자열로 넘겨줘야 할까요?
함수 선언만 봐서는 알 수가 없음... 함수를 호출하는 다른 코드 일부를 봐야 명확해짐

*하지만 TS를 사용한다면 
function getUserById(userId: number) {
  // 사용자 id를 이용하여 사용자 정보 조회 api 호출
}
userId가 숫자 타입인 것을 알 수 있고, 문자열을 넘겨주면 에러가 발생!
함수 선언만 봐도 코드가 명확해짐

2) 엄격한 타입 체크로 인한 부가적인 효과
TS는 에러메세지가 디테일하고 자동완성 기능이 강력함

자바스크립트만 쓰는 회사가 많지만, 타입스크립트 점유율이 점점 더 높아지고 있다.

3. 타입스크립트 설치
npm install -g typescript 
-g: 글로벌, 전역설치 (VSCode내부 전체에서 사용 가능)

4. tsconfig.json 작성(타입스크립트 설정)
프로젝트의 root쪽에 작성